#!/usr/bin/perl
#
require "./tools.pl";

#
main();

#
sub BuildASM
{
	my ($i,$i2,@lst,$str,$str2);

	#
	@lst = LoadList("find $_[0] -maxdepth 1 -type f -name '*.asm'|");
	if($#lst<0) { return; }

	#
	for($i=0; $i<($#lst+1); $i++)
	{
		#
		$objects[$n_objects] =		$lst[$i];
		$objects[$n_objects] =~		s/\.asm$/.o/;
		$objlist2 =			"$objlist2$objects[$n_objects] ";
		$objects[$n_objects] =~		s/^.*\/(.+\.o)$/$1/;
		$objlist =			"$objlist$objects[$n_objects] ";
		$n_objects++;
	}

	#
	$str = $_[0];
	$str =~ s/^.*\/(.+)$/$1/;
	$sections = "$sections$str ";

	#
#	$str = "$str: ";
#	for($i=0; $i<($#lst+1); $i++)
#	{
#		$str = "$str$lst[$i] ";
#	}
#	$str = "$str\n";

	#
	$str = "";

	#
	for($i=0; $i<($#lst+1); $i++)
	{
		$str2 = $lst[$i];
		$str2 =~ s/\.asm$/.o/;
		$str3 = $str2;
		$str3 =~ s/^.*\/(.+)$/$1/;
		$str = "$str$str3: ";
		$str = "$str$lst[$i]\n";
		$str = "$str\t\$(ASM) \$(ASMFLAGS) $lst[$i] -o $str2\n\n";
	}
	$str = "$str\n";

	#
	return $str;
}


#
sub BuildC
{
	my ($i,$i2,@lst,$str,$str2);

	#
	@lst = LoadList("find $_[0] -maxdepth 1 -type f -name '*.c'|");
	if($#lst<0) { return; }

	#
	for($i=0; $i<($#lst+1); $i++)
	{
		#
		if( $lst[$i] =~ /start\.c$/ ) { goto skip; }
		$objects[$n_objects] =		$lst[$i];
		$objects[$n_objects] =~		s/\.c$/.o/;
		$objlist2 =			"$objlist2$objects[$n_objects] ";
		$objects[$n_objects] =~		s/^.*\/(.+\.o)$/$1/;
		$objlist =			"$objlist$objects[$n_objects] ";
		$n_objects++;
skip:
	}

	#
	$str = $_[0];
	$str =~ s/^.*\/(.+)$/$1/;
	$sections = "$sections$str ";

	#
#	$str = "$str: ";
#	for($i=0; $i<($#lst+1); $i++)
#	{
#		$str = "$str$lst[$i] ";
#	}
#	$str = "$str\n";

	#
	$str = "";

	#
	for($i=0; $i<($#lst+1); $i++)
	{
		$str2 = $lst[$i];
		$str2 =~ s/\.c$/.o/;
		$str3 = $str2;
		$str3 =~ s/^.*\/(.+)$/$1/;
		$str = "$str$str3: ";
		$str = "$str$lst[$i]\n";
		$str = "$str\t\$(CC) \$(CFLAGS) $lst[$i] -o $str2\n\n";
	}
	$str = "$str\n";

	#
	return $str;
}

#
sub main
{
	my ($i,$i2,@lst,$str,$str2);

	#
	$n_objects = 0;
	$objlist =	"";
	$objlist2 =	"";
	$complines =	"";
	$sections =	"";

	#
	print("# JTMOS KERNEL MAKEFILE\n");
	print("# This file is automatically generated.\n");

	#
	@settings = LoadList("settings.txt");
	for($i=0; $i<($#settings+1); $i++)
	{
		print "$settings[$i]\n";
	}
	print "\n";

	#
	@lst = LoadList("find . -type d|");

	#
	for($i=0; $i<($#lst+1); $i++)
	{
		if($lst[$i] eq ".") { goto skip; }
		if($lst[$i] eq "..") { goto skip; }
		if( ($str=BuildC($lst[$i])) ne "" )
		{
			$complines = $complines . $str;
		}

		if( ($str=BuildASM($lst[$i])) ne "" )
		{
			$complines = $complines . $str;
		}
skip:
	}

	#
	print "OBJECTS = ";
	for($i=0; $i<($#objects+1); $i++)
	{
		print "$objects[$i] ";
	}
	print "\n";
	print "\n";

	#
	print "all: $objlist";
	print "\n";
	print "\n";

	#
	$objlist2 = "init/start.o $objlist2";
	print "linkit: $objlist2\n";
	print "\t\@echo ---: linking kernel into a binary file\n";
	print "\t\$(LD) $objlist2 \$(STALDFLAGS)\n";
	print "\tcat kernel32.map | ../tools/map2sym.pl > kernel32.sym\n";
	print "\t\$(LD) $objlist2 \$(DOSLDFLAGS)\n";
	print "\tcat dosker32.map | ../tools/map2sym.pl > dosker32.sym\n";
	print "\tls -lah -s kernel32.bin\n";
	print "\tmv dosker32.bin ../dosker/\n";
	print "\tls -lah -s ../dosker/dosker32.bin\n";
	print "\n";
	print "\n";

	#
	print $complines;

	#
}

